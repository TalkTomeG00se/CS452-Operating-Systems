## Project 2 - Thread Safe Library

* Author: Colten Davis
* Class: CS452/CS552 [Operating Systems] Section 001

## Overview
This project aimed to take a existing list library, and change it so that is it "thread-safe". The aim is to 
eliminate any race conditions, and ensure that any calculations are repeatable, showing that no race conditions occurred.

## Manifest
include - Directory
lib - Directory
list
    - include 
        - List.h - List header file
        - Node.h - Node header file
    - lib
        - libmylib.a - static library
        - libmylib.so - dynamic library
    - Makefile
    - SimpleTestList.c
wrapper-library
    - Makefile - makefile within the library
    - ThreadsafeBoundedList.c - c file for threadsafe list
    - ThreadsafeBoundedList.h - header file for threadsafe list
item.c - Item class
item.h - Item header file
Makefile - The makefile for this project
README - This README
pc.c - Helps simulate consumers and producers
test-pc-mq.sh - test script for the multi-queue
test-pc.sh - test script


## Building the project
1. First we must export both paths, ensuring they are related to the executable
2. Run the following: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./list/lib:./lib
3. Run "make" to compile via GCC
4. Note: Run "make clean" to clean up everything

## Features and usage

This program wraps an existing library, with locks to ensure that no race conditions occurr. 
It does this by implementing pthread locks around any actions that change the list.

In order to test the program, run the following after building the project ( see above )
- The test script test-pc.sh can now be run via "./test-pc.sh"

This will simulate producers and consumers, ensuring that the amount produced and consumed is the same.

## Testing
I ran the test-pc.sh script to ensure that the consumers and producers matched, and they did. 
I also changed the values of the threads and items, ensuring that calculations remained the same.

## Known Bugs
No known bugs currently exist that I am aware of. 

## Reflection and Self Assessment
I understood that all the functions in the ThreadsafeBoundList header file needed to be implemented, similar  
to an interface is implemented in Java. The "get" and "set" functions were easy enough, but I ran into quite
a few issues with the addding/removing functions, and the most difficult time with the tsb_createList function.
Similar to Project 1, the constructor was more luck and my Google skills. The source from cs.kent.edu was a large
help on how to structure everything. 

I ran into several issues in development. I had my "unlock" function at the very end of every function, after a signal 
and after the return statement. This caused the test script to hang infintely, I had to kill it. My sources show that
a signal can come before a unlock, but for some reason this program would not allow it. Nor do I understand why I 
can't have the unlock after a the return statement. I had to change every function to accomodate this new information.
What was nice, is that once a remove or add function was made, I just copied it and made the other function, only changing
the built in function, such as making the removeFront function, then only changing one function to make the removeRear function.

I'm still not familiar with C as a language, so I have to rely heavily on man pages, Stack Overflow, anything Google can show me.
I struggled with most, as I said, with the tsb_createList. A few Stack Overflow posts help get me on the right direction, 
along with our class notes. I would consider this a challenging project for me. 


## Sources used
Pthread Man Pages
https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_init.html
https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_cond_init.html
https://pubs.opengroup.org/onlinepubs/007904975/functions/pthread_cond_broadcast.html
https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_cond_wait.html
https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_cond_signal.html

Other Sources
https://www.geeksforgeeks.org/condition-wait-signal-multi-threading/
https://www.ibm.com/docs/en/i/7.4?topic=ssw_ibm_i_74/apis/users_76.htm
https://docs.oracle.com/cd/E19455-01/806-5257/6je9h032r/index.html
https://gist.github.com/rtv/4989304
http://www.cs.kent.edu/~ruttan/sysprog/lectures/multi-thread/multi-thread.html
https://stackoverflow.com/questions/4989451/mutex-example-tutorial
https://www.delftstack.com/howto/c/c-malloc-struct/
https://stackoverflow.com/questions/14768230/malloc-for-struct-and-pointer-in-c


